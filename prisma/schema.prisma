// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]
  cartItems CartItem[]
  blogPosts BlogPost[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

// Address Management
model Address {
  id          String   @id @default(cuid())
  userId      String
  street      String
  city        String
  state       String
  zipCode     String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Product Categories
model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// Products
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Decimal
  comparePrice Decimal?
  quantity    Int      @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   Category   @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

// Product Images
model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// Shopping Cart
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

// Orders
model Order {
  id          String   @id @default(cuid())
  userId      String
  orderNumber String   @unique
  status      OrderStatus @default(PENDING)
  total       Decimal
  subtotal    Decimal
  tax         Decimal  @default(0)
  shipping    Decimal  @default(0)
  discount    Decimal  @default(0)
  paymentMethod     String
  paymentStatus     PaymentStatus @default(PENDING)
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user  User      @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

// Order Items
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  price     Decimal
  quantity  Int
  total     Decimal

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Blog System
model BlogCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  posts BlogPost[]

  @@map("blog_categories")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  featuredImage String?
  authorId    String
  categoryId  String
  status      BlogPostStatus @default(DRAFT)
  isFeatured  Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User         @relation(fields: [authorId], references: [id])
  category BlogCategory @relation(fields: [categoryId], references: [id])

  @@map("blog_posts")
}

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
