generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String?
  role      UserRole   @default(CUSTOMER)
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  addresses Address[]
  blogPosts BlogPost[]
  cartItems CartItem[]
  orders    Order[]

  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id           String         @id @default(cuid())
  name         String
  slug         String         @unique
  description  String
  price        Decimal
  comparePrice Decimal?
  quantity     Int            @default(0)
  isActive     Boolean        @default(true)
  isFeatured   Boolean        @default(false)
  categoryId   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  cartItems    CartItem[]
  orderItems   OrderItem[]
  images       ProductImage[]
  category     Category       @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  total         Decimal
  subtotal      Decimal
  tax           Decimal       @default(0)
  shipping      Decimal       @default(0)
  discount      Decimal       @default(0)
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         OrderItem[]
  user          User          @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  price     Decimal
  quantity  Int
  total     Decimal
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogPost {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  content       String
  excerpt       String?
  featuredImage String?
  authorId      String
  categoryId    String
  status        BlogPostStatus @default(DRAFT)
  isFeatured    Boolean        @default(false)
  publishedAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  author        User           @relation(fields: [authorId], references: [id])
  category      BlogCategory   @relation(fields: [categoryId], references: [id])

  @@map("blog_posts")
}

model HeaderSettings {
  id         String   @id @default(cuid())
  logoText   String
  navigation Json
  showCart   Boolean  @default(true)
  showLogin  Boolean  @default(true)
  updatedAt  DateTime @updatedAt

  @@map("header_settings")
}

model FooterSettings {
  id          String   @id @default(cuid())
  companyInfo Json
  quickLinks  Json
  socialLinks Json
  legalLinks  Json
  updatedAt   DateTime @updatedAt

  @@map("footer_settings")
}

model Page {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isHomepage  Boolean  @default(false)
  order       Int      @default(0)

  @@map("pages")
}

model HomepageSettings {
  id                  String   @id @default(cuid())
  heroTitle           String
  heroSubtitle        String?
  featuredProducts    Json?
  showFeaturedSection Boolean  @default(true)
  showServicesSection Boolean  @default(true)
  showTestimonials    Boolean  @default(true)
  updatedAt           DateTime @updatedAt

  @@map("homepage_settings")
}

model DatabaseBackup {
  id        String       @id @default(cuid())
  filename  String
  size      Int
  status    BackupStatus @default(COMPLETED)
  createdAt DateTime     @default(now())
  notes     String?

  @@map("database_backups")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BackupStatus {
  PENDING
  COMPLETED
  FAILED
}
