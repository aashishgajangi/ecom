generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  role          UserRole       @default(CUSTOMER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  addresses     Address[]
  blogPosts     BlogPost[]
  cartItems     CartItem[]
  media         Media[]
  orders        Order[]
  pageRevisions PageRevision[]
  productReviews ProductReview[]

  @@map("users")
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Category {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  description  String?
  image        String?
  icon         String?
  parentId     String?
  isActive     Boolean       @default(true)
  order        Int           @default(0)
  seoTitle     String?
  seoDescription String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  products     Product[]
  subcategories Category[]   @relation("CategoryHierarchy")
  parentCategory Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])

  @@map("categories")
}

model Product {
  id                String                @id @default(cuid())
  name              String
  slug              String                @unique
  description       String
  shortDescription  String?
  price             Decimal
  comparePrice      Decimal?
  costPrice         Decimal?
  quantity          Int                   @default(0)
  minQuantity       Int                   @default(1)
  weight            Decimal?
  weightUnit        WeightUnit            @default(GRAMS)
  dimensions        Json?                 // {length, width, height, unit}
  isActive          Boolean               @default(true)
  isFeatured        Boolean               @default(false)
  isDigital         Boolean               @default(false)
  requiresShipping  Boolean               @default(true)
  trackInventory    Boolean               @default(true)
  allowBackorder    Boolean               @default(false)
  categoryId        String
  brandId           String?
  manufacturerId    String?
  sku               String?               @unique
  barcode           String?               @unique
  nutritionChart    String?               // File path to nutrition chart
  expiryDate        DateTime?
  shelfLife         Int?                  // In days
  storageInstructions String?
  ingredients       String?
  allergens         String?
  certifications    String[]              // Organic, Fair Trade, etc.
  seoTitle          String?
  seoDescription    String?
  seoKeywords       String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  cartItems         CartItem[]
  orderItems        OrderItem[]
  images            ProductImage[]
  variants          ProductVariant[]
  tags              ProductTag[]
  discounts         ProductDiscount[]
  reviews           ProductReview[]
  category          Category              @relation(fields: [categoryId], references: [id])
  brand             Brand?                @relation(fields: [brandId], references: [id])
  manufacturer      Manufacturer?         @relation(fields: [manufacturerId], references: [id])

  @@map("products")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("brands")
}

model Manufacturer {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  logo        String?
  website     String?
  address     String?
  phone       String?
  email       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("manufacturers")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  order     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String
  sku       String?  @unique
  price     Decimal?
  weight    Decimal?
  quantity  Int      @default(0)
  isActive  Boolean  @default(true)
  options   Json     // {color: "Red", size: "Large"}
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Tag {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  description String?
  color       String?      // Hex color for display
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  products    ProductTag[]

  @@map("tags")
}

model ProductTag {
  id        String  @id @default(cuid())
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
}

model ProductDiscount {
  id          String      @id @default(cuid())
  productId   String
  name        String
  type        DiscountType
  value       Decimal     // Percentage or fixed amount
  minQuantity Int?        @default(1)
  maxQuantity Int?
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_discounts")
}

model ProductReview {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("product_reviews")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  total         Decimal
  subtotal      Decimal
  tax           Decimal       @default(0)
  shipping      Decimal       @default(0)
  discount      Decimal       @default(0)
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         OrderItem[]
  user          User          @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  price     Decimal
  quantity  Int
  total     Decimal
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogPost {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  content       String
  excerpt       String?
  featuredImage String?
  authorId      String
  categoryId    String
  status        BlogPostStatus @default(DRAFT)
  isFeatured    Boolean        @default(false)
  publishedAt   DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  author        User           @relation(fields: [authorId], references: [id])
  category      BlogCategory   @relation(fields: [categoryId], references: [id])

  @@map("blog_posts")
}

model HeaderSettings {
  id         String   @id @default(cuid())
  logoText   String
  logoImage  String?  // URL to logo image file
  logoType   LogoType @default(TEXT) // TEXT or IMAGE or BOTH
  navigation Json
  showCart   Boolean  @default(true)
  showLogin  Boolean  @default(true)
  updatedAt  DateTime @updatedAt

  @@map("header_settings")
}

model FooterSettings {
  id          String   @id @default(cuid())
  companyInfo Json
  quickLinks  Json
  socialLinks Json
  legalLinks  Json
  updatedAt   DateTime @updatedAt

  @@map("footer_settings")
}

model Page {
  id                 String         @id @default(cuid())
  slug               String         @unique
  title              String
  content            String?
  isPublished        Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  isHomepage         Boolean        @default(false)
  order              Int            @default(0)
  template           String?
  canonicalUrl       String?
  focusKeyword       String?
  metaDescription    String?
  metaKeywords       String?
  metaTitle          String?
  ogDescription      String?
  ogImage            String?
  ogTitle            String?
  parentPageId       String?
  scheduledPublish   DateTime?
  scheduledUnpublish DateTime?
  seoScore           Int?           @default(0)
  status             PageStatus     @default(DRAFT)
  structuredData     Json?
  twitterCard        String?
  twitterDescription String?
  twitterImage       String?
  twitterTitle       String?
  version            Int            @default(1)
  metadata           Json?
  blocks             PageBlock[]
  revisions          PageRevision[]
  parentPage         Page?          @relation("PageHierarchy", fields: [parentPageId], references: [id])
  childPages         Page[]         @relation("PageHierarchy")

  @@map("pages")
}

model PageRevision {
  id              String   @id @default(cuid())
  pageId          String
  title           String
  content         String?
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  createdAt       DateTime @default(now())
  authorId        String
  author          User     @relation(fields: [authorId], references: [id])
  page            Page     @relation(fields: [pageId], references: [id])

  @@map("page_revisions")
}

model ContentBlock {
  id         String      @id @default(cuid())
  identifier String      @unique
  title      String
  content    String?
  type       BlockType   @default(HTML)
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  pages      PageBlock[]

  @@map("content_blocks")
}

model PageBlock {
  id      String       @id @default(cuid())
  pageId  String
  blockId String
  order   Int          @default(0)
  block   ContentBlock @relation(fields: [blockId], references: [id])
  page    Page         @relation(fields: [pageId], references: [id])

  @@unique([pageId, blockId])
  @@map("page_blocks")
}

model SEOSettings {
  id                    String   @id @default(cuid())
  globalMetaTitle       String?
  globalMetaDescription String?
  globalMetaKeywords    String?
  socialLinks           Json?
  analyticsCode         String?
  verificationCodes     Json?
  updatedAt             DateTime @updatedAt

  @@map("seo_settings")
}

model HomepageSettings {
  id                  String   @id @default(cuid())
  heroTitle           String
  heroSubtitle        String?
  featuredProducts    Json?
  showFeaturedSection Boolean  @default(true)
  showServicesSection Boolean  @default(true)
  showTestimonials    Boolean  @default(true)
  updatedAt           DateTime @updatedAt

  @@map("homepage_settings")
}

model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  url          String
  size         Int
  type         String
  width        Int?
  height       Int?
  alt          String?
  caption      String?
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])

  @@map("media")
}

model DatabaseBackup {
  id        String       @id @default(cuid())
  filename  String
  size      Int
  status    BackupStatus @default(COMPLETED)
  createdAt DateTime     @default(now())
  notes     String?

  @@map("database_backups")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum BackupStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PageStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

enum BlockType {
  HTML
  RICH_TEXT
  IMAGE
  VIDEO
  CAROUSEL
  FORM
  PRODUCT_GRID
  CATEGORY_NAV
}

enum WeightUnit {
  GRAMS
  KILOGRAMS
  POUNDS
  OUNCES
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
  BULK_DISCOUNT
}

enum LogoType {
  TEXT
  IMAGE
  BOTH
}
